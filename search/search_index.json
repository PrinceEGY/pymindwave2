{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyMindWave2","text":"<p>A Python package that simplifies connecting and gathering data from the Neurosky MindWave Mobile 2 EEG headset.</p> <p>This package is made to ease the process of data collection and interfacing with the MindWave Mobile 2 EEG headset mainly for researchers and students who are interested in using the headset for their projects.</p> <p>Note: This is an unofficial package and is not affiliated with Neurosky.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy to use: Provides a simple and intuitive API to interact with the headset.</li> <li>Data collection: Provides a way to manage data collection sessions with different configurations.</li> <li>Event-driven: Allows you to register callbacks for different events to ease the process of handling data.</li> <li>Built-in retry and timeout: Automatically retries to connect to the headset if the connection fails.</li> <li>Fully documented: You don't know what a function does? Just check the documentation.</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#minimal-working-example","title":"Minimal working example","text":"<p>A minimal example to start a functional data collection session <pre><code>from pymindwave2 import MindWaveMobile2, Session, SessionConfig\n\n# Initialize and connect to the headset\nheadset = MindWaveMobile2()\nsuccess = headset.start(n_tries=5, timeout=30)\n\nif success:  # if the headset is connected successfully\n    # Create a session configuration\n    sess_config = SessionConfig(\n        user_name=\"Ahmed\",\n        classes=[\"left\", \"right\"]  # Define your classification tasks\n    )\n\n    # Initialize and start the recording session\n    session = Session(headset, config=sess_config)\n\n    while headset.signal_quality != 100:\n        time.sleep(1)  # wait for the user to wear the headset properly\n\n    session.start()  # Start recording data\n\n    while session.is_active:\n        time.sleep(1)  # wait for the session to finish\n\n    session.save()  # save the recorded data to disk\n</code></pre></p>"},{"location":"examples/#session-configuration-attributes","title":"Session Configuration attributes","text":"<p><pre><code>sess_config = SessionConfig(\n    user_name=\"Ahmed\",  # Name of the user\n    user_age=0,         # Age of the user\n    classes=[\"left\", \"right\", \"foot\"],  # Classes used for motor imagery tasks\n    n_trials=10,        # Number of trials for each class\n    capture_blinks=True,  # Whether to capture blinks or not\n    motor_duration=5,    # Duration of each motor imagery task in seconds\n)\n</code></pre> for the full list of attributes, check SessionConfig</p>"},{"location":"examples/#event-listeners","title":"Event Listeners","text":"<p>An example to subscribe to headset data emitted events <pre><code>from pymindwave2 import MindWaveMobile2, HeadsetDataEvent\n\nheadset = MindWaveMobile2()\nsuccess = headset.start(n_tries=5, timeout=30)\n\nif sucess:\n    def meditation_handler(event: HeadsetDataEvent):\n        print(event.data.meditation)\n\n    subscription = headset.on_data(meditation_handler)\n\n    while some_condition:\n        time.sleep(1)\n\n    subscription.detach()  # Unsubscribe from the event\n</code></pre> An example to reconnect to the headset if the connection is lost <pre><code>... # headset connection\ndef reconnect_handler(event:HeadsetStatusEvent):\n    if event.status == ConnectionStatus.CONNECTION_LOST:\n        headset.start(n_tries=5, timeout=30)\n\nsubscription = headset.on_status_change(reconnect_handler)\n</code></pre></p> <p>Notify user when the headset is not worn properly <pre><code>... # headset connection\ndef signal_quality_handler(event:SignalQualityEvent):\n    if event.signal_quality &lt; 100:\n        print(\"Please wear the headset properly\")\n\nsubscription = headset.on_signal_quality_change(signal_quality_handler)\n</code></pre></p> <p>Subscribe to session signals, such as start and end of each trial and phases of the trial. This can be used to build a GUI on top of it to create data collection environment. <pre><code>... # session and headset connection\ndef session_handler(event:SessionEvent):\n    signal = event.signal\n    if signal == SessionSignal.SESSION_START:\n        print(\"Session started\")\n    elif signal == SessionSignal.TRIAL_START:\n        print(\"Trial started for class:\", event.class_name)\n    elif signal == SessionSignal.REST:\n        print(\"Resting phase\")\n    elif signal == SessionSignal.READY:\n        print(\"Ready for the motor imagery task\")\n    elif signal == SessionSignal.CUE:\n        print(\"Cue for the motor imagery task\")\n    elif signal == SessionSignal.MOTOR :\n        print(\"Motor imagery task\")\n    elif signal == SessionSignal.TRIAL_END:\n        print(\"Trial ended\")\n    elif signal == SessionSignal.SESSION_END:\n        print(\"Session ended\")\n\nsubscription = session.on_signal(session_handler)\n</code></pre> for the full list of Session Signals, check SessionSignal.</p> <p>for the data collection session workflow, check Session Workflow.</p>"},{"location":"examples/#logging","title":"Logging","text":"<p>The module has different levels of logging, you can change the logging level to see more or less information, as well as logging to a file or console options. Note: if you want to configure the logger, do it before initializing any object from the module <pre><code>from pymindwave2 import Logger\nLogger.configure_logger(level=\"DEBUG\", file_path=\"mindwave.log\", mode=\"w\", console_output=False)\n</code></pre> for more details about the logger, check Logger.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>Prerequisites: Before installing the package, make sure to do the following:</p> <ul> <li> <p>Install the official NeuroSky ThinkGear Connector software on your computer. It enables communication between your computer and the headset through a serial port. You can download it from here. And make sure it's running in the background.</p> </li> <li> <p>Pair the headset with your computer via Bluetooth. You can follow the instructions in NeuroSky's pairing guide.</p> </li> </ul> <p>Then you can install the package using pip:</p> <pre><code>pip install pymindwave2\n</code></pre>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#quick-start","title":"Quick Start","text":"<p>A minimal example to start a data collection session: <pre><code>from pymindwave2 import MindWaveMobile2, Session, SessionConfig\n\n# Initialize and connect to the headset\nheadset = MindWaveMobile2()\nsuccess = headset.start(n_tries=5, timeout=30)\n\nif success:  # if the headset is connected successfully\n    # Create a session configuration\n    sess_config = SessionConfig(\n        user_name=\"Ahmed\",\n        ...  # other configurations\n        classes=[\"left\", \"right\"]\n    )\n\n    # Initialize and start the recording session\n    session = Session(headset, config=sess_config)\n    session.start()  # Start recording data\n\n    while session.is_active:\n        pass  # wait for the session to finish\n\n    session.save()  # save the recorded data to disk\n</code></pre></p> <p>for more examples and detailed usage, check the Examples</p>"},{"location":"api/enums/","title":"Enums","text":""},{"location":"api/enums/#mindwave.headset.ConnectionStatus","title":"ConnectionStatus","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of possible headset connection states.</p> <p>States marked as TGC are emitted natively by the ThinkGear Connector.</p> <p>States marked as CUSTOM are custom states defined by this module.</p>"},{"location":"api/enums/#mindwave.headset.ConnectionStatus.CONNECTED","title":"CONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTED = 1\n</code></pre> <p>TGC: The headset is successfully connected via ThinkGear Connector and actively streaming data.</p>"},{"location":"api/enums/#mindwave.headset.ConnectionStatus.DISCONNECTED","title":"DISCONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISCONNECTED = 2\n</code></pre> <p>TGC: Both the headset and the ThinkGear Connector are disconnected.</p>"},{"location":"api/enums/#mindwave.headset.ConnectionStatus.IDLE","title":"IDLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IDLE = 3\n</code></pre> <p>TGC: The headset is not connected and the ThinkGear Connector is idle.</p>"},{"location":"api/enums/#mindwave.headset.ConnectionStatus.SCANNING","title":"SCANNING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SCANNING = 4\n</code></pre> <p>TGC: The ThinkGear Connector is scanning for the MindWaveMobile2 device.</p>"},{"location":"api/enums/#mindwave.headset.ConnectionStatus.NOTSCANNING","title":"NOTSCANNING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NOTSCANNING = 5\n</code></pre> <p>TGC: The ThinkGear Connector is not scanning for the MindWaveMobile2 device.</p>"},{"location":"api/enums/#mindwave.headset.ConnectionStatus.UNKOWN","title":"UNKOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UNKOWN = 6\n</code></pre> <p>CUSTOM: Unrecognized TGC connection status.</p>"},{"location":"api/enums/#mindwave.headset.ConnectionStatus.CONNECTION_LOST","title":"CONNECTION_LOST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTION_LOST = 7\n</code></pre> <p>CUSTOM: The headset connection was lost. (Represents a transition from CONNECTED to any other state)</p>"},{"location":"api/enums/#mindwave.utils.event_manager.EventType","title":"EventType","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of event types that can be emitted by the event manager.</p>"},{"location":"api/enums/#mindwave.utils.event_manager.EventType.Blink","title":"Blink  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Blink = 1\n</code></pre> <p>Blink detection event.</p>"},{"location":"api/enums/#mindwave.utils.event_manager.EventType.ConnectorData","title":"ConnectorData  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ConnectorData = 2\n</code></pre> <p>Raw data from the connector, JSON-parsed.</p>"},{"location":"api/enums/#mindwave.utils.event_manager.EventType.HeadsetData","title":"HeadsetData  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HeadsetData = 3\n</code></pre> <p>Parsed data from the headset, contains all streamed attributes.</p>"},{"location":"api/enums/#mindwave.utils.event_manager.EventType.HeadsetStatus","title":"HeadsetStatus  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HeadsetStatus = 4\n</code></pre> <p>Status updates from the headset.</p>"},{"location":"api/enums/#mindwave.utils.event_manager.EventType.SessionEvent","title":"SessionEvent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SessionEvent = 5\n</code></pre> <p>Events related to session.</p>"},{"location":"api/enums/#mindwave.utils.event_manager.EventType.SignalQuality","title":"SignalQuality  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SignalQuality = 6\n</code></pre> <p>Signal quality updates.</p>"},{"location":"api/enums/#mindwave.utils.event_manager.EventType.Timeout","title":"Timeout  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Timeout = 7\n</code></pre> <p>Timeout event.</p>"},{"location":"api/enums/#mindwave.session.SessionSignal","title":"SessionSignal","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of signals emitted during a session.</p>"},{"location":"api/enums/#mindwave.session.SessionSignal.SESSION_START","title":"SESSION_START  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SESSION_START = 1\n</code></pre>"},{"location":"api/enums/#mindwave.session.SessionSignal.SESSION_END","title":"SESSION_END  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SESSION_END = 2\n</code></pre>"},{"location":"api/enums/#mindwave.session.SessionSignal.BASELINE_START","title":"BASELINE_START  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BASELINE_START = 3\n</code></pre>"},{"location":"api/enums/#mindwave.session.SessionSignal.BASELINE_END","title":"BASELINE_END  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BASELINE_END = 4\n</code></pre>"},{"location":"api/enums/#mindwave.session.SessionSignal.TRIAL_START","title":"TRIAL_START  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TRIAL_START = 5\n</code></pre>"},{"location":"api/enums/#mindwave.session.SessionSignal.TRIAL_END","title":"TRIAL_END  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TRIAL_END = 6\n</code></pre>"},{"location":"api/enums/#mindwave.session.SessionSignal.REST","title":"REST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REST = 7\n</code></pre>"},{"location":"api/enums/#mindwave.session.SessionSignal.READY","title":"READY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>READY = 8\n</code></pre>"},{"location":"api/enums/#mindwave.session.SessionSignal.CUE","title":"CUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CUE = 9\n</code></pre>"},{"location":"api/enums/#mindwave.session.SessionSignal.MOTOR","title":"MOTOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MOTOR = 10\n</code></pre>"},{"location":"api/events/","title":"Events","text":""},{"location":"api/events/#mindwave.connector.ConnectorDataEvent","title":"ConnectorDataEvent  <code>dataclass</code>","text":"<pre><code>ConnectorDataEvent(data: dict, timestamp: datetime = None)\n</code></pre> <p>               Bases: <code>Event</code></p> <p>ThinkGear Connector Data Event.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict</code> <p>Json formatted data received from the ThinkGear Connector.</p> <code>timestamp</code> <code>datetime</code> <p>The timestamp when the Data was received.</p> Source code in <code>mindwave/connector.py</code> <pre><code>def __init__(self, data: dict, timestamp: datetime = None):\n    \"\"\"Initialize the ConnectorDataEvent.\n\n    Args:\n        data (dict): The data received from the ThinkGear Connector.\n        timestamp (datetime, optional): The timestamp when the event was created.\n        if not provided, the current time is used.\n    \"\"\"\n    super().__init__(event_type=EventType.ConnectorData, timestamp=timestamp)\n    self.data = data\n</code></pre>"},{"location":"api/events/#mindwave.headset.HeadsetStatusEvent","title":"HeadsetStatusEvent  <code>dataclass</code>","text":"<pre><code>HeadsetStatusEvent(status: ConnectionStatus, timestamp: datetime = None)\n</code></pre> <p>               Bases: <code>Event</code></p> <p>Headset connection status change event.</p> <p>Attributes:</p> Name Type Description <code>status</code> <code>ConnectionStatus</code> <p>Current ConnectionStatus of the headset.</p> <code>timestamp</code> <code>datetime</code> <p>The timestamp when the status changed.</p> Source code in <code>mindwave/headset.py</code> <pre><code>def __init__(self, status: ConnectionStatus, timestamp: datetime = None):\n    \"\"\"Initialize a HeadsetStatusEvent.\n\n    Args:\n        status (ConnectionStatus): New ConnectionStatus of the headset.\n        timestamp (datetime, optional): The timestamp when the status changed.\n        if not provided, the current time is used.\n    \"\"\"\n    super().__init__(event_type=EventType.HeadsetStatus, timestamp=timestamp)\n    self.status = status\n</code></pre>"},{"location":"api/events/#mindwave.utils.stream_parser.HeadsetDataEvent","title":"HeadsetDataEvent  <code>dataclass</code>","text":"<pre><code>HeadsetDataEvent(data: Data, timestamp: datetime = None)\n</code></pre> <p>               Bases: <code>Event</code></p> <p>Headset Data Event.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>Data</code> <p>The parsed data from the stream.</p> <code>timestamp</code> <code>datetime</code> <p>The timestamp of the event.</p> Source code in <code>mindwave/utils/stream_parser.py</code> <pre><code>def __init__(self, data: Data, timestamp: datetime = None) -&gt; None:\n    \"\"\"Initializes a new HeadsetDataEvent instance.\n\n    Args:\n        data (Data): The parsed data from the stream.\n        timestamp (datetime, optional): The timestamp of the event.\n    \"\"\"\n    super().__init__(event_type=EventType.HeadsetData, timestamp=timestamp)\n    self.data = data\n</code></pre>"},{"location":"api/events/#mindwave.headset.BlinkEvent","title":"BlinkEvent  <code>dataclass</code>","text":"<pre><code>BlinkEvent(blink_strength: int, timestamp: datetime = None)\n</code></pre> <p>               Bases: <code>Event</code></p> <p>Blink detection event.</p> <p>Attributes:</p> Name Type Description <code>blink_strength</code> <code>int</code> <p>The strength of the detected blink.</p> <code>timestamp</code> <code>datetime</code> <p>The timestamp when the blink was detected.</p> Source code in <code>mindwave/headset.py</code> <pre><code>def __init__(self, blink_strength: int, timestamp: datetime = None):\n    \"\"\"Initialize a BlinkEvent.\n\n    Args:\n        blink_strength (int): Strength of the detected blink [0-255].\n        timestamp (datetime, optional): Timestamp of the event.\n        if not provided, the current time is used.\n\n    \"\"\"\n    super().__init__(event_type=EventType.Blink, timestamp=timestamp)\n    self.blink_strength = blink_strength\n</code></pre>"},{"location":"api/events/#mindwave.headset.SignalQualityEvent","title":"SignalQualityEvent  <code>dataclass</code>","text":"<pre><code>SignalQualityEvent(signal_quality: int, timestamp: datetime = None)\n</code></pre> <p>               Bases: <code>Event</code></p> <p>Signal quality change event.</p> <p>Attributes:</p> Name Type Description <code>signal_quality</code> <code>int</code> <p>Integer representing signal quality value (0-100%).</p> <code>timestamp</code> <code>datetime</code> <p>The timestamp when the signal quality changed.</p> Source code in <code>mindwave/headset.py</code> <pre><code>def __init__(self, signal_quality: int, timestamp: datetime = None):\n    \"\"\"Initialize a SignalQualityEvent.\n\n    Args:\n        signal_quality (int): Integer Signal quality value in the range of 0-100.\n        timestamp (datetime, optional): Timestamp of the event.\n        if not provided, the current time is used.\n    \"\"\"\n    super().__init__(event_type=EventType.SignalQuality, timestamp=timestamp)\n    self.signal_quality = signal_quality\n</code></pre>"},{"location":"api/events/#mindwave.headset.TimeoutEvent","title":"TimeoutEvent  <code>dataclass</code>","text":"<pre><code>TimeoutEvent(timestamp: datetime = None)\n</code></pre> <p>               Bases: <code>Event</code></p> <p>Timeout event.</p> <p>Attributes:</p> Name Type Description <code>timestamp</code> <code>datetime</code> <p>The timestamp when the timeout occurred.</p> Source code in <code>mindwave/headset.py</code> <pre><code>def __init__(self, timestamp: datetime = None):\n    \"\"\"Initialize a TimeoutEvent.\n\n    Args:\n        timestamp (datetime, optional): Timestamp of the event.\n        if not provided, the current time is used.\n    \"\"\"\n    super().__init__(event_type=EventType.Timeout, timestamp=timestamp)\n</code></pre>"},{"location":"api/events/#mindwave.session.SessionEvent","title":"SessionEvent  <code>dataclass</code>","text":"<pre><code>SessionEvent(signal: SessionSignal, class_name: str = None, timestamp: datetime = None)\n</code></pre> <p>               Bases: <code>Event</code></p> <p>Session Event.</p> <p>Attributes:</p> Name Type Description <code>signal</code> <code>SessionSignal</code> <p>The signal emitted during the session.</p> <code>class_name</code> <code>str</code> <p>The class name associated with the event.</p> <code>timestamp</code> <code>datetime</code> <p>The timestamp of the event.</p> Source code in <code>mindwave/session.py</code> <pre><code>def __init__(self, signal: SessionSignal, class_name: str = None, timestamp: datetime = None) -&gt; None:\n    \"\"\"Initializes a new SessionEvent instance.\n\n    Args:\n        signal (SessionSignal): The signal emitted during the session.\n        class_name (str, optional): The class name associated with the event.\n        (e.g., the class being imagined during a motor imagery task).\n        timestamp (datetime, optional): The timestamp of the event.\n    \"\"\"\n    super().__init__(event_type=EventType.SessionEvent, timestamp=timestamp)\n    self.signal = signal\n    self.class_name = class_name\n</code></pre>"},{"location":"api/headset/","title":"MindwaveMobile2","text":""},{"location":"api/headset/#mindwave.utils.stream_parser.Data","title":"Data  <code>dataclass</code>","text":"<pre><code>Data(raw_data: list[int] = lambda: [0 for _ in range(512)](), attention: int = 0, meditation: int = 0, delta: int = 0, theta: int = 0, lowAlpha: int = 0, highAlpha: int = 0, lowBeta: int = 0, highBeta: int = 0, lowGamma: int = 0, highGamma: int = 0)\n</code></pre> <p>A data container for storing the parsed data from the stream.</p> <p>Attributes:</p> Name Type Description <code>raw_data</code> <code>list[int]</code> <p>A list of 512 raw EEG readings.</p> <code>attention</code> <code>int</code> <p>The attention level (0-100).</p> <code>meditation</code> <code>int</code> <p>The meditation level (0-100).</p> <code>delta</code> <code>int</code> <p>Power level in the delta frequency band.</p> <code>theta</code> <code>int</code> <p>Power level in the theta frequency band.</p> <code>lowAlpha</code> <code>int</code> <p>Power level in the low alpha frequency band.</p> <code>highAlpha</code> <code>int</code> <p>Power level in the high alpha frequency band.</p> <code>lowBeta</code> <code>int</code> <p>Power level in the low beta frequency band.</p> <code>highBeta</code> <code>int</code> <p>Power level in the high beta frequency band.</p> <code>lowGamma</code> <code>int</code> <p>Power level in the low gamma frequency band.</p> <code>highGamma</code> <code>int</code> <p>Power level in the high gamma frequency band.</p>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2","title":"MindWaveMobile2","text":"<pre><code>MindWaveMobile2(event_loop: AbstractEventLoop = None, tg_connector: ThinkGearConnector = None)\n</code></pre> <p>The main interface for the NeuroSky MindWaveMobile2 EEG headset.</p> <p>This class provides an event-based interface for connecting to and receiving data from a MindWaveMobile2 headset using the ThinkGear connector service.</p> <p>Parameters:</p> Name Type Description Default <code>event_loop</code> <code>AbstractEventLoop</code> <p>The event loop to use for asynchronous operations.</p> <code>None</code> <code>tg_connector</code> <code>ThinkGearConnector</code> <p>The ThinkGearConnector instance to use.</p> <code>None</code> Source code in <code>mindwave/headset.py</code> <pre><code>def __init__(\n    self,\n    event_loop: asyncio.AbstractEventLoop = None,\n    tg_connector: ThinkGearConnector = None,\n) -&gt; None:\n    \"\"\"Initialize a MindWaveMobile2 instance.\n\n    Args:\n        event_loop (asyncio.AbstractEventLoop, optional): The event loop to use for asynchronous operations.\n        If not provided, it will check for a running event loop in the current thread.\n        If no running event loop is found, a new event loop will be created in a new thread.\n        tg_connector (ThinkGearConnector, optional): The ThinkGearConnector instance to use.\n        If not provided, a new instance with default settings will be created.\n    \"\"\"\n    super().__init__()\n    self.is_running: bool = False\n    self._event_loop: asyncio.AbstractEventLoop = event_loop\n\n    self._logger: logging.Logger = Logger.get_logger(self.__class__.__name__)\n    self._tg_connector = ThinkGearConnector() if tg_connector is None else tg_connector\n    self._event_manager = EventManager()\n    self._signal_quality: int = 0\n    self._connection_status: ConnectionStatus = ConnectionStatus.DISCONNECTED\n    self._stream_parser = StreamParser()\n    self._parser_connector_supscription: Subscription = None\n    self._lock = asyncio.Lock()\n    self._read_loop_task: asyncio.Task = None\n\n    self.on_connector_data(self._update_status)\n</code></pre>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.signal_quality","title":"signal_quality  <code>property</code> <code>writable</code>","text":"<pre><code>signal_quality: float\n</code></pre> <p>Float signal quality value normalized to the range of 0-100%.</p> <p>The raw signal quality value is in the range of 0-200 (0 indicating a good signal and 200 indicating an off-head state).</p> <p>If the raw signal quality value is needed, it can be accessed from the connector data through the on_connector_data events.</p>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.connection_status","title":"connection_status  <code>property</code> <code>writable</code>","text":"<pre><code>connection_status: ConnectionStatus\n</code></pre> <p>Current ConnectionStatus of the headset.</p>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.start","title":"start","text":"<pre><code>start(n_tries=3, timeout=15, blocking=True) -&gt; bool\n</code></pre> <p>Start the connection to the MindWaveMobile2 device.</p> <p>A connection to be considered successful, the Connection to the TGConnector is not an indication, The TGConnector must find and connect to the MindWaveMobile2 device and start streaming data. Which is indicated by the ConnectionStatus.CONNECTED.</p> <p>Parameters:</p> Name Type Description Default <code>n_tries</code> <code>int</code> <p>The number of connection attempts.</p> <code>3</code> <code>timeout</code> <code>int</code> <p>The timeout for each connection attempt in seconds.</p> <code>15</code> <code>blocking</code> <code>bool</code> <p>Whether to block until the connection is established.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the connection was successful, False otherwise.</p> <code>bool</code> <p>If blocking is False, it returns True if the connection process was started successfully.</p> Source code in <code>mindwave/headset.py</code> <pre><code>def start(self, n_tries=3, timeout=15, blocking=True) -&gt; bool:\n    \"\"\"Start the connection to the MindWaveMobile2 device.\n\n    A connection to be considered successful, the Connection to the TGConnector is not an indication,\n    The TGConnector must find and connect to the MindWaveMobile2 device and start streaming data.\n    Which is indicated by the ConnectionStatus.CONNECTED.\n\n    Args:\n        n_tries (int, optional): The number of connection attempts.\n        timeout (int, optional): The timeout for each connection attempt in seconds.\n        blocking (bool, optional): Whether to block until the connection is established.\n\n    Returns:\n        bool: True if the connection was successful, False otherwise.\n        If blocking is False, it returns True if the connection process was started successfully.\n    \"\"\"\n    self._setup_event_loop()\n    future = asyncio.run_coroutine_threadsafe(self._start_async(n_tries=n_tries, timeout=timeout), self._event_loop)\n\n    if blocking:\n        return future.result()\n    else:\n        return True\n</code></pre>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.stop","title":"stop","text":"<pre><code>stop(blocking=True) -&gt; bool\n</code></pre> <p>Stop the connection to the MindWaveMobile2 device.</p> <p>Parameters:</p> Name Type Description Default <code>blocking</code> <code>bool</code> <p>Whether to block until the disconnection is complete.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the disconnection was successful, False otherwise.</p> <code>bool</code> <p>If blocking is False, it returns True if the disconnection process was started successfully.</p> Source code in <code>mindwave/headset.py</code> <pre><code>def stop(self, blocking=True) -&gt; bool:\n    \"\"\"Stop the connection to the MindWaveMobile2 device.\n\n    Args:\n        blocking (bool, optional): Whether to block until the disconnection is complete.\n\n    Returns:\n        bool: True if the disconnection was successful, False otherwise.\n        If blocking is False, it returns True if the disconnection process was started successfully.\n    \"\"\"\n    self._setup_event_loop()\n\n    future = asyncio.run_coroutine_threadsafe(self._stop_async(), self._event_loop)\n    if blocking:\n        return future.result()\n    else:\n        return True\n</code></pre>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.on_data","title":"on_data","text":"<pre><code>on_data(callback: Callable[[HeadsetDataEvent], Any]) -&gt; Subscription\n</code></pre> <p>Rigister a callback for the processed headset data.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>function</code> <p>The callback function to be called when data is received.</p> required <p>Returns:</p> Name Type Description <code>Subscription</code> <code>Subscription</code> <p>A Subscription object that can be used to detach the callback.</p> Source code in <code>mindwave/headset.py</code> <pre><code>def on_data(self, callback: Callable[[HeadsetDataEvent], Any]) -&gt; Subscription:\n    \"\"\"Rigister a callback for the processed headset data.\n\n    Args:\n        callback (function): The callback function to be called when data is received.\n\n    Returns:\n        Subscription: A Subscription object that can be used to detach the callback.\n    \"\"\"\n    return self._stream_parser.on_data(callback)\n</code></pre>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.on_blink","title":"on_blink","text":"<pre><code>on_blink(callback: Callable[[BlinkEvent], Any]) -&gt; Subscription\n</code></pre> <p>Register a callback for the blink detection event.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>function</code> <p>The callback function to be called when a blink is detected.</p> required <p>Returns:</p> Name Type Description <code>Subscription</code> <code>Subscription</code> <p>the subscription object that can be used to detach the callback</p> Source code in <code>mindwave/headset.py</code> <pre><code>def on_blink(self, callback: Callable[[BlinkEvent], Any]) -&gt; Subscription:\n    \"\"\"Register a callback for the blink detection event.\n\n    Args:\n        callback (function): The callback function to be called when a blink is detected.\n\n    Returns:\n        Subscription: the subscription object that can be used to detach the callback\n    \"\"\"\n    return self._event_manager.add_listener(EventType.Blink, callback)\n</code></pre>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.on_status_change","title":"on_status_change","text":"<pre><code>on_status_change(callback: Callable[[HeadsetStatusEvent], Any]) -&gt; Subscription\n</code></pre> <p>Register a callback for the headset connection status change event.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>function</code> <p>The callback function to be called when the connection status changes.</p> required <p>Returns:</p> Name Type Description <code>Subscription</code> <code>Subscription</code> <p>the subscription object that can be used to detach the callback</p> Source code in <code>mindwave/headset.py</code> <pre><code>def on_status_change(self, callback: Callable[[HeadsetStatusEvent], Any]) -&gt; Subscription:\n    \"\"\"Register a callback for the headset connection status change event.\n\n    Args:\n        callback (function): The callback function to be called when the connection status changes.\n\n    Returns:\n        Subscription: the subscription object that can be used to detach the callback\n    \"\"\"\n    return self._event_manager.add_listener(EventType.HeadsetStatus, callback)\n</code></pre>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.on_signal_quality_change","title":"on_signal_quality_change","text":"<pre><code>on_signal_quality_change(callback: Callable[[SignalQualityEvent], Any]) -&gt; Subscription\n</code></pre> <p>Register a callback for the signal quality change event.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>function</code> <p>The callback function to be called when the signal quality changes.</p> required <p>Returns:</p> Name Type Description <code>Subscription</code> <code>Subscription</code> <p>the subscription object that can be used to detach the callback</p> Source code in <code>mindwave/headset.py</code> <pre><code>def on_signal_quality_change(self, callback: Callable[[SignalQualityEvent], Any]) -&gt; Subscription:\n    \"\"\"Register a callback for the signal quality change event.\n\n    Args:\n        callback (function): The callback function to be called when the signal quality changes.\n\n    Returns:\n        Subscription: the subscription object that can be used to detach the callback\n    \"\"\"\n    return self._event_manager.add_listener(EventType.SignalQuality, callback)\n</code></pre>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.on_connector_data","title":"on_connector_data","text":"<pre><code>on_connector_data(callback: Callable[[ConnectorDataEvent], Any]) -&gt; Subscription\n</code></pre> <p>Register a callback for the ThinkGear Connector data event.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>function</code> <p>The callback function to be called when data is received from the ThinkGear Connector.</p> required <p>Returns:</p> Name Type Description <code>Subscription</code> <code>Subscription</code> <p>the subscription object that can be used to detach the callback</p> Source code in <code>mindwave/headset.py</code> <pre><code>def on_connector_data(self, callback: Callable[[ConnectorDataEvent], Any]) -&gt; Subscription:\n    \"\"\"Register a callback for the ThinkGear Connector data event.\n\n    Args:\n        callback (function): The callback function to be called when data is received from the ThinkGear Connector.\n\n    Returns:\n        Subscription: the subscription object that can be used to detach the callback\n    \"\"\"\n    return self._event_manager.add_listener(EventType.ConnectorData, callback)\n</code></pre>"},{"location":"api/headset/#mindwave.headset.MindWaveMobile2.on_timeout","title":"on_timeout","text":"<pre><code>on_timeout(callback: Callable[[TimeoutEvent], Any]) -&gt; Subscription\n</code></pre> <p>Register a callback for the timeout event.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>function</code> <p>The callback function to be called when a timeout occurs.</p> required <p>Returns:</p> Name Type Description <code>Subscription</code> <code>Subscription</code> <p>the subscription object that can be used to detach the callback</p> Source code in <code>mindwave/headset.py</code> <pre><code>def on_timeout(self, callback: Callable[[TimeoutEvent], Any]) -&gt; Subscription:\n    \"\"\"Register a callback for the timeout event.\n\n    Args:\n        callback (function): The callback function to be called when a timeout occurs.\n\n    Returns:\n        Subscription: the subscription object that can be used to detach the callback\n    \"\"\"\n    return self._event_manager.add_listener(EventType.Timeout, callback)\n</code></pre>"},{"location":"api/logger/","title":"Logger","text":""},{"location":"api/logger/#mindwave.utils.logger.Logger","title":"Logger","text":"<p>A utility class for configuring and managing loggers in the application.</p> <p>It configures logging with both file and console output, using a consistent format across all loggers.</p>"},{"location":"api/logger/#mindwave.utils.logger.Logger.configure_logger","title":"configure_logger  <code>classmethod</code>","text":"<pre><code>configure_logger(level: str = 'INFO', filename: str = 'mindwave.log', filemode: str = 'w', console_output: bool = True, file_output: bool = True) -&gt; None\n</code></pre> <p>Configures the logger with the specified level and output options.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>The logging level to use. Possible values are \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\".</p> <code>'INFO'</code> <code>filename</code> <code>str</code> <p>The name of the file to write logs to.</p> <code>'mindwave.log'</code> <code>filemode</code> <code>str</code> <p>The mode to open the log file in.</p> <code>'w'</code> <code>console_output</code> <code>bool</code> <p>Whether to enable logging to console.</p> <code>True</code> <code>file_output</code> <code>bool</code> <p>Whether to enable logging to file.</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both console_output and file_output are False.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Basic usage with default settings (both console and file logging)\n&gt;&gt;&gt; MyClass.configure_logger()\n</code></pre> <pre><code>&gt;&gt;&gt; # Debug level logging to console only\n&gt;&gt;&gt; MyClass.configure_logger(\n...     level=\"DEBUG\",\n...     console_output=True,\n...     file_output=False\n... )\n</code></pre> <pre><code>&gt;&gt;&gt; # Error level logging to specific file in append mode\n&gt;&gt;&gt; MyClass.configure_logger(\n...     level=\"ERROR\",\n...     filename=\"errors.log\",\n...     filemode=\"a\",\n...     console_output=False,\n...     file_output=True\n... )\n</code></pre> <pre><code>&gt;&gt;&gt; # Multiple output logging with custom configuration\n&gt;&gt;&gt; MyClass.configure_logger(\n...     level=\"INFO\",\n...     filename=\"application.log\",\n...     filemode=\"w\",\n...     console_output=True,\n...     file_output=True\n... )\n</code></pre> <p>The resulting log entries will look like: 2024-01-12 10:30:45,123 [INFO] my_module::MyClass.my_function - Log message here</p> Source code in <code>mindwave/utils/logger.py</code> <pre><code>@classmethod\ndef configure_logger(\n    cls,\n    level: str = \"INFO\",\n    filename: str = \"mindwave.log\",\n    filemode: str = \"w\",\n    console_output: bool = True,\n    file_output: bool = True,\n) -&gt; None:\n    \"\"\"Configures the logger with the specified level and output options.\n\n    Args:\n        level (str): The logging level to use.\n            Possible values are \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\".\n        filename (str): The name of the file to write logs to.\n        filemode (str): The mode to open the log file in.\n        console_output (bool): Whether to enable logging to console.\n        file_output (bool): Whether to enable logging to file.\n\n    Raises:\n        ValueError: If both console_output and file_output are False.\n\n    Examples:\n        &gt;&gt;&gt; # Basic usage with default settings (both console and file logging)\n        &gt;&gt;&gt; MyClass.configure_logger()\n\n        &gt;&gt;&gt; # Debug level logging to console only\n        &gt;&gt;&gt; MyClass.configure_logger(\n        ...     level=\"DEBUG\",\n        ...     console_output=True,\n        ...     file_output=False\n        ... )\n\n        &gt;&gt;&gt; # Error level logging to specific file in append mode\n        &gt;&gt;&gt; MyClass.configure_logger(\n        ...     level=\"ERROR\",\n        ...     filename=\"errors.log\",\n        ...     filemode=\"a\",\n        ...     console_output=False,\n        ...     file_output=True\n        ... )\n\n        &gt;&gt;&gt; # Multiple output logging with custom configuration\n        &gt;&gt;&gt; MyClass.configure_logger(\n        ...     level=\"INFO\",\n        ...     filename=\"application.log\",\n        ...     filemode=\"w\",\n        ...     console_output=True,\n        ...     file_output=True\n        ... )\n\n        The resulting log entries will look like:\n        2024-01-12 10:30:45,123 [INFO] my_module::MyClass.my_function - Log message here\n    \"\"\"\n    if not (console_output or file_output):\n        raise ValueError(\"At least one logging output (console or file) must be enabled\")\n\n    cls._logger = logging.getLogger()\n    cls._logger.handlers.clear()  # Clear any existing handlers\n\n    formatter = logging.Formatter(\"%(asctime)s [%(levelname)s] %(module)s::%(name)s.%(funcName)s - %(message)s\")\n\n    if console_output:\n        st_handler = logging.StreamHandler()\n        st_handler.setFormatter(formatter)\n        st_handler.setLevel(level)\n        cls._logger.addHandler(st_handler)\n\n    if file_output:\n        f_handler = logging.FileHandler(filename, mode=filemode)\n        f_handler.setFormatter(formatter)\n        f_handler.setLevel(level)\n        cls._logger.addHandler(f_handler)\n\n    cls._logger.setLevel(level)\n</code></pre>"},{"location":"api/logger/#mindwave.utils.logger.Logger.get_logger","title":"get_logger  <code>classmethod</code>","text":"<pre><code>get_logger(name: str) -&gt; Logger\n</code></pre> <p>Gets a named logger instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A string specifying the logger name, typically the module or  component name.</p> required <p>Returns:</p> Type Description <code>Logger</code> <p>logging.Logger: A configured logger instance with the specified name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; logger = Logger.get_logger(__name__)\n&gt;&gt;&gt; logger.info(\"This is a log message from the module.\")\n</code></pre> Source code in <code>mindwave/utils/logger.py</code> <pre><code>@classmethod\ndef get_logger(cls, name: str) -&gt; logging.Logger:\n    \"\"\"Gets a named logger instance.\n\n    Args:\n        name: A string specifying the logger name, typically the module or\n             component name.\n\n    Returns:\n        logging.Logger: A configured logger instance with the specified name.\n\n    Examples:\n        &gt;&gt;&gt; logger = Logger.get_logger(__name__)\n        &gt;&gt;&gt; logger.info(\"This is a log message from the module.\")\n    \"\"\"\n    if cls._logger is None:\n        cls.configure_logger()\n    return cls._logger.getChild(name)\n</code></pre>"},{"location":"api/session/","title":"Session","text":""},{"location":"api/session/#mindwave.session.SessionConfig","title":"SessionConfig  <code>dataclass</code>","text":"<pre><code>SessionConfig(user_name: str = None, user_age: int = None, user_gender: str = None, classes: list = lambda: ['default'](), trials: int = 1, baseline_duration: float = 15, rest_duration: float = 2, ready_duration: float = 1, cue_duration: float = 1.5, motor_duration: float = 4, extra_duration: float = 0, save_dir: str = './sessions/', capture_blinks: bool = False)\n</code></pre> <p>Configuration settings for a session.</p> <p>Attributes:</p> Name Type Description <code>user_name</code> <code>str</code> <p>Name of the user.</p> <code>user_age</code> <code>int</code> <p>Age of the user.</p> <code>user_gender</code> <code>str</code> <p>Gender of the user.</p> <code>classes</code> <code>list</code> <p>List of class names for the session.</p> <code>trials</code> <code>int</code> <p>Number of trials per class.</p> <code>baseline_duration</code> <code>float</code> <p>Duration of the baseline phase in seconds.</p> <code>rest_duration</code> <code>float</code> <p>Duration of the rest phase in seconds.</p> <code>ready_duration</code> <code>float</code> <p>Duration of the ready phase in seconds.</p> <code>cue_duration</code> <code>float</code> <p>Duration of the cue phase in seconds.</p> <code>motor_duration</code> <code>float</code> <p>Duration of the motor phase in seconds.</p> <code>extra_duration</code> <code>float</code> <p>Additional random duration added to motor phase.</p> <code>save_dir</code> <code>str</code> <p>Directory to save session data.</p> <code>capture_blinks</code> <code>bool</code> <p>Whether to capture blink events.</p>"},{"location":"api/session/#mindwave.session.Session","title":"Session","text":"<pre><code>Session(headset: MindWaveMobile2, config: SessionConfig, lazy_start: bool = True)\n</code></pre> <p>Manages EEG headset data collection sessions.</p> <p>This class handles the configuration, execution, and data storage of EEG data collection sessions.</p> <p>It also emits signals at different stages of the session, this can be used to build a UI on top of it.</p> <p>Session flow:</p> <ul> <li>Session Start signal: Indicates the start of the session.</li> <li>Baseline Start signal: Indicates the start of the baseline phase.</li> <li>Baseline End signal: Indicates the end of the baseline phase. for trial in range(trials*len(classes)):<ul> <li>Trial Start signal: Indicates the start of a new trial associated with a class.</li> <li>Rest signal: Indicates the rest phase before starting the motor imagery task.</li> <li>Ready signal: Indicates the ready phase before the cue.</li> <li>Cue signal: Indicates the cue phase for the motor imagery task.</li> <li>Motor signal: Indicates the start of the motor imagery task.</li> <li>Trial End signal: Indicates the end of the trial associated with a class.</li> </ul> </li> <li>Session End signal: Indicates the end of the session.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>headset</code> <code>MindWaveMobile2</code> <p>The MindWave Mobile 2 headset instance.</p> required <code>config</code> <code>SessionConfig</code> <p>The configuration settings for the session.</p> required <code>lazy_start</code> <code>bool</code> <p>Whether to start the session immediately after initialization.</p> <code>True</code> Source code in <code>mindwave/session.py</code> <pre><code>def __init__(\n    self,\n    headset: MindWaveMobile2,\n    config: SessionConfig,\n    lazy_start: bool = True,\n) -&gt; None:\n    \"\"\"Initializes a new Session instance.\n\n    Args:\n        headset (MindWaveMobile2): The MindWave Mobile 2 headset instance.\n        config (SessionConfig): The configuration settings for the session.\n        lazy_start (bool, optional): Whether to start the session immediately after initialization.\n    \"\"\"\n    self._logger = Logger.get_logger(self.__class__.__name__)\n    self.headset = headset\n    self.config = config\n\n    self.start_time = None\n    self.end_time = None\n    self.is_active = False\n    self.is_finished = False\n\n    self._event_manager = EventManager()\n    self._save_dir = None\n    self._data_subscription = None\n    self._blinks_subscription = None\n    self._data = []\n    self._events = []\n    self._stop_flag = threading.Event()\n\n    if not lazy_start:\n        self.start()\n\n    random.seed(time.perf_counter())\n</code></pre>"},{"location":"api/session/#mindwave.session.Session.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Starts the data collection session.</p> <p>NOTE: The headset must be running before starting the session.</p> Source code in <code>mindwave/session.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Starts the data collection session.\n\n    NOTE: The headset must be running before starting the session.\n    \"\"\"\n    if not self.headset.is_running:\n        self._logger.info(\"Headset is not running!, start headset before starting the session\")\n        return\n    if self.is_active:\n        self._logger.info(\"Session is already active!\")\n        return\n    if self.is_finished:\n        self._logger.info(\"Session is finished!\")\n        return\n\n    self._data_subscription = self.headset.on_data(self._data_collator)\n    if self.config.capture_blinks:\n        self._blinks_subscription = self.headset.on_blink(self._data_collator)\n\n    self._create_user_dir()\n    self._save_info()\n\n    self.is_active = True\n    self.start_time = datetime.now()\n    self._stop_flag.clear()\n\n    thread = threading.Thread(target=self._events_processor, daemon=True)\n    thread.start()\n\n    self._logger.info(f\"New Session started at {self.start_time.strftime('%H:%M:%S')}\")\n</code></pre>"},{"location":"api/session/#mindwave.session.Session.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stops the data collection session.</p> Source code in <code>mindwave/session.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stops the data collection session.\"\"\"\n    if not self.is_active:\n        self._logger.info(\"Session is not active!\")\n        return\n\n    self._stop_flag.set()\n    self.end_time = datetime.now()\n\n    self.is_active = False\n    self.is_finished = True\n\n    self._data_subscription.detach()\n    if self.config.capture_blinks:\n        self._blinks_subscription.detach()\n\n    self._logger.info(f\"Session ended at {self.end_time.strftime('%H:%M:%S')}\")\n</code></pre>"},{"location":"api/session/#mindwave.session.Session.save","title":"save","text":"<pre><code>save()\n</code></pre> <p>Saves the collected session data and events to disk.</p> Source code in <code>mindwave/session.py</code> <pre><code>def save(self):\n    \"\"\"Saves the collected session data and events to disk.\"\"\"\n    if self.is_active:\n        self._logger.info(\"Session is still active!, stop the session before saving\")\n        return\n    if len(self) == 0:\n        self._logger.info(\"Session data is empty!, nothing to save\")\n        return\n\n    if not self._save_dir:\n        self._create_user_dir()\n\n    filename = f\"{self._save_dir}/data.csv\"\n    with open(filename, mode=\"w\", newline=\"\", encoding=\"utf-8\") as file:\n        writer = csv.DictWriter(file, fieldnames=self._data[0].keys())\n        writer.writeheader()\n        writer.writerows(self._data)\n\n    self._save_events()\n\n    self._logger.info(f\"Session collected data is saved to {self._save_dir}\")\n</code></pre>"},{"location":"api/session/#mindwave.session.Session.on_signal","title":"on_signal","text":"<pre><code>on_signal(listener: Callable[[SessionEvent], Any]) -&gt; Subscription\n</code></pre> <p>Registers a listener for session signals.</p> <p>Parameters:</p> Name Type Description Default <code>listener</code> <code>Callable[[SessionEvent], Any]</code> <p>The listener function to be called when a session event is emitted.</p> required <p>Returns:</p> Name Type Description <code>Subscription</code> <code>Subscription</code> <p>A Subscription object that can be used to unsubscribe the listener.</p> Source code in <code>mindwave/session.py</code> <pre><code>def on_signal(self, listener: Callable[[SessionEvent], Any]) -&gt; Subscription:\n    \"\"\"Registers a listener for session signals.\n\n    Args:\n        listener: The listener function to be called when a session event is emitted.\n\n    Returns:\n        Subscription: A Subscription object that can be used to unsubscribe the listener.\n    \"\"\"\n    return self._event_manager.add_listener(EventType.SessionEvent, listener)\n</code></pre>"},{"location":"api/tg_connector/","title":"ThinkGear Connector","text":""},{"location":"api/tg_connector/#mindwave.connector.ThinkGearConnector","title":"ThinkGearConnector","text":"<pre><code>ThinkGearConnector(host: str = 'localhost', port: int = 13854, enable_raw_output: bool = True, output_format: str = 'Json')\n</code></pre> <p>Manage connection and communication with the ThinkGear Connector service.</p> <p>This class provides methods to establish, maintain, and close connections with the ThinkGear Connector service, as well as read and write data to/from the device.</p> <p>The host and port for the ThinkGear Connector service are configured with default values of \"localhost\" and 13854, respectively. In most cases, you will not need to modify these settings.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The hostname of the ThinkGear Connector service.</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>The port number of the ThinkGear Connector service.</p> <code>13854</code> <code>enable_raw_output</code> <code>bool</code> <p>Whether to enable raw EEG output.</p> <code>True</code> <code>output_format</code> <code>str</code> <p>The format of the output data. Can be either \"Json\" or \"BinaryPacket\".</p> <code>'Json'</code> Source code in <code>mindwave/connector.py</code> <pre><code>def __init__(\n    self,\n    host: str = \"localhost\",\n    port: int = 13854,\n    enable_raw_output: bool = True,\n    output_format: str = \"Json\",\n) -&gt; None:\n    \"\"\"Initialize the ThinkGearConnector.\n\n    The host and port for the ThinkGear Connector service are\n    configured with default values of \"localhost\" and 13854, respectively.\n    In most cases, you will not need to modify these settings.\n\n    Args:\n        host (str): The hostname of the ThinkGear Connector service.\n        port (int): The port number of the ThinkGear Connector service.\n        enable_raw_output (bool): Whether to enable raw EEG output.\n        output_format (str): The format of the output data. Can be either \"Json\" or \"BinaryPacket\".\n    \"\"\"\n    self.host: str = host\n    self.port: int = port\n    self.enable_raw_output: bool = enable_raw_output\n    self.output_format: str = output_format\n    self.st_writer: asyncio.StreamWriter = None\n    self.st_reader: asyncio.StreamReader = None\n    self._logger = Logger.get_logger(self.__class__.__name__)\n</code></pre>"},{"location":"api/tg_connector/#mindwave.connector.ThinkGearConnector.write","title":"write","text":"<pre><code>write(data: bytes) -&gt; None\n</code></pre> <p>Write data to the ThinkGear Connector.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>The data to be sent to the ThinkGear Connector.</p> required <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If the ThinkGear Connector is not connected</p> Source code in <code>mindwave/connector.py</code> <pre><code>def write(self, data: bytes) -&gt; None:\n    \"\"\"Write data to the ThinkGear Connector.\n\n    Args:\n        data (bytes): The data to be sent to the ThinkGear Connector.\n\n    Raises:\n        ConnectionError: If the ThinkGear Connector is not connected\n    \"\"\"\n    if not self.is_connected():\n        raise ConnectionError(\"The device is not connected, please connect first using the connect() method.\")\n\n    self.st_writer.write(data)\n</code></pre>"},{"location":"api/tg_connector/#mindwave.connector.ThinkGearConnector.read","title":"read  <code>async</code>","text":"<pre><code>read() -&gt; bytes\n</code></pre> <p>Read data from the ThinkGear Connector.</p> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>The data received from the ThinkGear Connector.</p> <p>Raises:</p> Type Description <code>ConnectionError</code> <p>If the ThinkGear Connector is not connected.</p> Source code in <code>mindwave/connector.py</code> <pre><code>async def read(self) -&gt; bytes:\n    \"\"\"Read data from the ThinkGear Connector.\n\n    Returns:\n        bytes: The data received from the ThinkGear Connector.\n\n    Raises:\n        ConnectionError: If the ThinkGear Connector is not connected.\n    \"\"\"\n    if not self.is_connected():\n        raise ConnectionError(\"The device is not connected, please connect first using the connect() method.\")\n\n    out = await self.st_reader.readuntil(b\"\\r\")\n    return out\n</code></pre>"},{"location":"api/tg_connector/#mindwave.connector.ThinkGearConnector.connect","title":"connect  <code>async</code>","text":"<pre><code>connect() -&gt; bool\n</code></pre> <p>Establish connection with the ThinkGear Connector service.</p> <p>Attempts to connect to the ThinkGear Connector service using the specified host and port. If successful, configures the connection with the specified settings.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if connection is successful or already connected, False otherwise.</p> Source code in <code>mindwave/connector.py</code> <pre><code>async def connect(self) -&gt; bool:\n    \"\"\"Establish connection with the ThinkGear Connector service.\n\n    Attempts to connect to the ThinkGear Connector service using the specified host\n    and port. If successful, configures the connection with the specified settings.\n\n    Returns:\n        bool: True if connection is successful or already connected, False otherwise.\n    \"\"\"\n    self._logger.debug(\"Initializing connection to ThinkGear Connector...\")\n    if self.is_connected():\n        self._logger.warning(\n            \"ThinkGear connector is already connected, to reconnect with different settings, \"\n            \"please disconnect first using the disconnect() method.\"\n        )\n        return True\n\n    try:\n        self.st_reader, self.st_writer = await asyncio.open_connection(self.host, self.port)\n        self._logger.debug(\"Connected to ThinkGear Connector\")\n    except ConnectionRefusedError:\n        self._logger.error(\n            f\"Connection to ThinkGear Connector at {self.host}:{self.port} refused!, \"\n            \"Check if the ThinkGear Connector is running.\"\n        )\n        await asyncio.sleep(3)\n        return False\n\n    self.write(\n        json.dumps(\n            {\n                \"enableRawOutput\": self.enable_raw_output,\n                \"format\": self.output_format,\n            }\n        ).encode(\"utf-8\")\n    )\n    return True\n</code></pre>"},{"location":"api/tg_connector/#mindwave.connector.ThinkGearConnector.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; bool\n</code></pre> <p>Disconnect from the ThinkGear Connector service.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if disconnection is successful or already disconnected.</p> Source code in <code>mindwave/connector.py</code> <pre><code>def disconnect(self) -&gt; bool:\n    \"\"\"Disconnect from the ThinkGear Connector service.\n\n    Returns:\n        bool: True if disconnection is successful or already disconnected.\n    \"\"\"\n    self._logger.info(\"Disconnecting ThinkGear Connector...\")\n\n    if not self.is_connected():\n        self._logger.debug(\"The device is already disconnected!\")\n        return True\n\n    self.st_writer.close()  # Closing st_writer automatically cleans up st_reader as well.\n    return True\n</code></pre>"},{"location":"api/tg_connector/#mindwave.connector.ThinkGearConnector.is_connected","title":"is_connected","text":"<pre><code>is_connected() -&gt; bool\n</code></pre> <p>Check if the connection to ThinkGear Connector is active.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if connected, False otherwise.</p> Source code in <code>mindwave/connector.py</code> <pre><code>def is_connected(self) -&gt; bool:\n    \"\"\"Check if the connection to ThinkGear Connector is active.\n\n    Returns:\n        bool: True if connected, False otherwise.\n    \"\"\"\n    if not self.st_writer:\n        return False\n\n    return not self.st_writer.is_closing()\n</code></pre>"}]}